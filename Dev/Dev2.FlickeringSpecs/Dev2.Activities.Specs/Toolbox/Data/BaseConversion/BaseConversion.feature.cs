// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Flickering.Specs.Dev2_Activities_Specs.Toolbox.Data.BaseConversion
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BaseConversion")]
    public partial class BaseConversionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BaseConversion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BaseConversion", "In order to convert base encoding types\r\nAs a Warewolf user\r\nI want a tool that c" +
                    "onverts data from one base econding to another", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Convert an empty recordset *")]
        [NUnit.Framework.TestCaseAttribute("1", "[[rs(*).row]]", "", "Binary", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("2", "[[rs(*).row]]", "", "Binary", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("3", "[[rs(*).row]]", "", "Binary", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("4", "[[rs(*).row]]", "", "Binary", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("5", "[[rs(*).row]]", "", "Text", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("6", "[[rs(*).row]]", "", "Text", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("7", "[[rs(*).row]]", "", "Text", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("8", "[[rs(*).row]]", "", "Text", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("9", "[[rs(*).row]]", "", "Hex", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("10", "[[rs(*).row]]", "", "Hex", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("11", "[[rs(*).row]]", "", "Hex", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("12", "[[rs(*).row]]", "", "Hex", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("13", "[[rs(*).row]]", "", "Base 64", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("14", "[[rs(*).row]]", "", "Base 64", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("15", "[[rs(*).row]]", "", "Base 64", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("16", "[[rs(*).row]]", "", "Base 64", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("17", "[[rs([[var]]).row]]", "", "Binary", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("18", "[[rs([[var]]).row]]", "", "Binary", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("19", "[[rs([[var]]).row]]", "", "Binary", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("20", "[[rs([[var]]).row]]", "", "Binary", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("21", "[[rs([[var]]).row]]", "", "Text", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("22", "[[rs([[var]]).row]]", "", "Text", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("23", "[[rs([[var]]).row]]", "", "Text", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("24", "[[rs([[var]]).row]]", "", "Text", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("25", "[[rs([[var]]).row]]", "", "Hex", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("26", "[[rs([[var]]).row]]", "", "Hex", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("27", "[[rs([[var]]).row]]", "", "Hex", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("28", "[[rs([[var]]).row]]", "", "Hex", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("29", "[[rs([[var]]).row]]", "", "Base 64", "Binary", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("30", "[[rs([[var]]).row]]", "", "Base 64", "Text", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("31", "[[rs([[var]]).row]]", "", "Base 64", "Hex", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("32", "[[rs([[var]]).row]]", "", "Base 64", "Base 64", "Invalid Index", null)]
        [NUnit.Framework.TestCaseAttribute("33", "[[rs().row]]", "", "Binary", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("34", "[[rs().row]]", "", "Binary", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("35", "[[rs().row]]", "", "Binary", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("36", "[[rs().row]]", "", "Binary", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("37", "[[rs().row]]", "", "Text", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("38", "[[rs().row]]", "", "Text", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("39", "[[rs().row]]", "", "Text", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("40", "[[rs().row]]", "", "Text", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("41", "[[rs().row]]", "", "Hex", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("42", "[[rs().row]]", "", "Hex", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("43", "[[rs().row]]", "", "Hex", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("44", "[[rs().row]]", "", "Hex", "Base 64", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("45", "[[rs().row]]", "", "Base 64", "Binary", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("46", "[[rs().row]]", "", "Base 64", "Text", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("47", "[[rs().row]]", "", "Base 64", "Hex", "Invalid Recordset", null)]
        [NUnit.Framework.TestCaseAttribute("48", "[[rs().row]]", "", "Base 64", "Base 64", "Invalid Recordset", null)]
        public virtual void ConvertAnEmptyRecordset(string no, string variable, string value, string from, string to, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an empty recordset *", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I convert a variable \"{0}\" with a value of \"<value>\"", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And(string.Format("I convert a variable \'{0}\' from type \'{1}\' to type \'{2}\'", variable, from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("the case conversion tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
